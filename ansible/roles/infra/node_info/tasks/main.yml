# Description:
#   Generates node names and mac addresses from given prefixes
#   and node count.
# Inputs:
#   node_info_args:
#     node_count: <number of node info's to generate>
#     node_name_prefix: <prefix for the node name>
#     networks: [ list of network names and associated mac address prefix for that network ]
#       - name: provisioning
#         mac_prefix: "52:54:00:32:c9:" --> mac address will be generated by just appending 00 - FF
#       - name: bm_net
#         mac_prefix: "52:54:aa:bb:cc:"
#       - name: bm_tarffic_net

- name: Validate input
  assert:
    that:
      - "node_info_args is defined"
      - "node_info_args.node_count is defined"
      - "node_info_args.node_name_prefix is defined"

- name: validate networks
  assert:
    that:
      - "net_info.name is defined"
  loop: "{{ node_info_args.networks }}"
  loop_control:
    loop_var: net_info

- name: generate mac prefixes for each network
  set_fact:
    mac_prefix: "{{ mac_prefix | default([]) + [single_mac_prefix] }}"
  vars:
    single_mac_prefix: "{{ net_info.mac_prefix
      | default(('52:54:' + ('%02X' % (net_index | int)) + ':aa:bb:')) }}"
  loop: "{{ node_info_args.networks }}"
  loop_control:
    index_var: net_index
    loop_var: net_info

- name: Initialize node_info list
  set_fact:
    node_info: []

- name: Initialize node Info
  set_fact:
    node_info: "{{ (node_info | default([])) + [single_node_info] }}"
  vars:
    single_node_info:
      name: "{{ node_info_args.node_name_prefix + (node_index | string) }}"
      mac_addresses: "{{ mac_prefix
        | map('regex_replace', '$', '%02X' % (node_index | int))
        | list }}"
  loop: "{{ range(0, (node_info_args.node_count | int), 1) | list }}"
  loop_control:
    loop_var: node_index
